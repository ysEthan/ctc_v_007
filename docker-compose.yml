name: ctc_template
services:
  # Redis服务 - 用于缓存和Celery消息代理
  redis:
    image: redis:7.4.2
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ctc_network
    command: redis-server --appendonly yes

  # Django后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "9001:9001"
    volumes:
      - media_data:/app/media
      - static_data:/app/static
      - ./data:/data
      - ./logs:/app/logs
    container_name: backend
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # 只保留容器间通信必需的环境变量
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - ctc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker - 异步任务处理
  celery_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: celery_worker
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      # 只保留容器间通信必需的环境变量
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - media_data:/app/media
      - ./data:/data
      - ./logs:/app/logs
    networks:
      - ctc_network
    command: celery -A mysite worker -l info

  # Celery Beat - 定时任务调度
  celery_beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: celery_beat
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      # 只保留容器间通信必需的环境变量
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - media_data:/app/media
      - ./data:/data
      - ./logs:/app/logs
    networks:
      - ctc_network
    command: celery -A mysite beat -l info

  # Vue前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ctc_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  ctc_network:
    driver: bridge

volumes:
  redis_data:
  media_data:
  static_data: